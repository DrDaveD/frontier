$Id$

v2_7_2 - 23 March 2007 (dwd)
 - Added a feature to use the subject name from a grid certificate
   found at $X509_USER_PROXY if it is present, instead of the user's
   name from /etc/passwd.
 - Added OPENSSL_DIR Makefile command line variable to specify a
   non-default directory for the openssl package.

v2_7_1 - 22 March 2007 (dwd)
 - Changed frontier_client library user-requested reload from 
   immediate cache refresh to adding "&ttl=short" to the query URL.
   This tells the Frontier servlet that the time-to-live of the cache
   of the query should be a "short" time, as defined by the server.
   This requires servlet version 3.5 to work properly; older servlet
   versions will still work but everything will expire at the same
   time.
 - Added complex connection string option "forcereload" and
   environment variable $FRONTIER_FORCERELOAD.  A value of "short"
   in either forces an immediate cache refresh on the short time-to-
   live queries and a value of "long" forces a refresh on all queries.
   The default is "none".

v2_7_0 - 4 January 2007 (dwd)
 Note that this release is not binary compatible, although it is
 source compatible.
 - Dropped the _cms designation from version numbers.
 - Changed AnyData::assignString() to avoid a new and delete for
   non-"array" data types.  This is now preferred for client programs
   to use in place of AnyData::getString() because it avoids a new and
   delete for all data types.
 - Added a private AnyData::getStrBuf() function to the C++ API to get
   access to a re-usable buffer for array types, to avoid having to do
   a new and delete for every piece of data that's of type array.
   This is only intended to be used internally by the "friend" class
   Session.
 - Added support for persistent connections that can be re-used for
   multiple queries.  The C++ API is to use two new C++ classes called
   Connection and Session instead of the previous DataSource (although
   that still works for backward source compatibility with one object
   per query).  Create one Connection object to hold connections to
   the frontier proxies & servers for a long time and create one
   Session object for each query.  Sometimes (when there's too much
   time between queries and when query results are large) the actual
   TCP connection does get dropped by the squid proxy, but it is
   automatically reconnected, transparent to the C++ API.
 - Keep track of sequence numbers on channels and on queries within a
   channel for debugging purposes.
 - Move messages that report connection problems and retries from the
   debug FRONTIER_LOG_LEVEL to the warning FRONTIER_LOG_LEVEL.
 - Changed the default connect timeout from 3 seconds to 5 seconds.
 - Added the ability to change the connect, read, and write timeout
   seconds via environment variables FRONTIER_CONNECTTIMEOUTSECS,
   FRONTIER_READTIMEOUTSECS, and FRONTIER_WRITETIMEOUTSECS or via
   the complex connection string entries connecttimeoutsecs,
   readtimeoutsecs, or writetimeoutsecs.
 - Re-try selects if they fail with EINTR (which can happen when
   profiling).
 - Added --retrieve-zip-level to fnget.py.
 - Added fnget2.py which is like fnget.py only supports multiple
   queries per connection.

v2_6_0_cms 09/18/2006 (dwd)
 - Change only the version number because the binary API changed in
   an incompatible way in v2_5_2_cms and that means a new second-level
   version number should be started.

v2_5_2_cms 09/13/2006 (dwd)
 - Add debug messages for pre-encoded query, the beginning of the
   post-decoded result, and the number of keepalives received (if any).
 - Make the destructor of the FrontierException class be virtual
   because Radovan Chytracek said it was causing stack corruption
   when an exception occurred.

v2_5_1_cms 08/07/2006 (dwd)
 - Instead of overloading $FRONTIER_SERVER to mean both a list of
   servers and the physical servers that correspond to the logical
   server name, add environment variable $FRONTIER_PHYSICALSERVERS to
   mean the latter.  If the DataSource::setDefaultParams API is not
   used, its values now can come from FRONTIER_LOGICALSERVER and
   FRONTIER_PHYSICALSERVERS.  Also, instead of ignoring the logical
   server name when it is seen, the physical servers are now
   substituted in its place (which is a little more intuitive).
 - Added new keyword for complex parenthesized connection strings
   called "logicalserverurl".  If it is defined, its value becomes the
   logical server for later connections and the rest of the string
   becomes the physical servers.   This was added because CORAL/POOL
   uses one connection string for the first few frontier client
   connections and then looks up subsequent connection strings in the
   POOL file catalog.  I didn't want to have to have the long
   connection strings in both places resulting in difficulty with
   keeping them all the same, and CMS did not want to pass them in
   environment variables, so I proposed this solution.

v2_5_0_cms 07/26/2006 (dwd)
 - Make uncompressing of zipped payload work with 64 bit compiler
   (where a long is 8 bytes and int is still 4 bytes).
 - Add notion of a "logical server" which is a server name that gets
   ignored in favor of servers/proxies that have been set by other
   means. 
 - Add new C++ API class function DataSource::setDefaultParams which
   takes parameters of a logical server name and a "parameter list"
   which can be either a complex server connection string (see note
   from v2_4_6_cms) or just a simple server string.  If this API is
   not used, the values can come instead from optional environment
   variables FRONTIER_LOGICALSERVER and FRONTIER_SERVER respectively.
 - Added new optional environment variable FRONTIER_RETRIEVEZIPLEVEL
   to set the retrieved zip level if it isn't set any other way.

v2_4_7_cms 07/12/2006 (dwd)
 - Fixed bug that limited the maximum number of servers and proxies to
    3 instead of the intended 4.  Also, increased the maximum number of
    servers to 6.  Removed the code that eliminated duplicate servers
    and proxies because we may want to deliberately include duplicates
    as part of a retry strategy.

v2_4_6_cms 07/11/2006 (dwd)
 - Added support for handling complex server connection strings
   containing parenthesized keyword-value pairs.  This was added to
   make it straightforward for higher CMS software levels to pass a
   single string to specify one connection.   The format is
   (keyword=value)...  where keyword is one of serverurl, proxyurl, or
   retrieve-ziplevel.  Keywords can appear multiple times, and
   anything between parenthesized components is ignored. 
 - Reduced network timeouts when talking to frontier server:
    - connect from 30 to 3 seconds - initial connect should be quick
        and don't want to wait too long in case a server is down
    - writes from 30 to 5 seconds - writes should be quick unless
        queues are large, which shouldn't happen
    - reads from 30 to 10 seconds - server now sends keepalives
        every 5 seconds if it isn't doing anything
 - Added support of ZLIB_DIR for the make command line to point to an
   external zlib package different than the standard zlib

v2_4_5_cms 06/16/2006 (dwd)
 - prevent the attempted build of the internal expat from deleting
   $(EXPAT_DIR) if it is passed on the make command line, and from
   installing the internal expat into the external $(EXPAT_DIR).
 - add showing the server version in the debug log

v2_4_4_cms 06/07/2006 (dwd)
 - added optional zipping of the retrieved payload.  The C++ API is
   Request::setRetrieveZipLevel(level) where 0 is off, 1 is fastest,
   5 is normal, and 9 is best compression.  Default is 5.  Requires
   corresponding update in frontier servlet, version 3.1 or greater.
 - eliminated another header file compile problem in FrontierException.hpp
   just like the one recently fixed in frontier-cpp.h, and eliminated
   a compile error seen when the inline LogicError constructor from
   the same file is used
 - eliminated some compiler warnings in frontier-cpp.h

v2_4_3_cms 06/01/2006 (dwd)
 - fixed a compile problem seen on amd64 in frontier-cpp.h
 - added frontier_initdebug C function that accepts a debug log file name
   and log level, and a frontier::init overloaded function that accepts
   the same two parameters

v2_4_2_cms 12/25/2005 (sv)
 - support for configuring client with multiple servers/proxies
 - initial work on exceptions for the C++ api

v2_4_1_cms 10/25/2005 (sv)
 - distribution changes: if external $EXPAT_DIR is provided, the expat
   files will not be included in the frontier library; however, client
   application will have to link against external libraries in $EXPAT_DIR/lib

v2_4_0_cms 10/12/2005 (sv)
 - cms pool clients seem to be working 
 - fn-any, fn-req are not working against service on edge due to interface 
   change relative to v2_3_1 release

v2_1_2 01/20/2005
 - bugs in NULL strings fixed
 - diagnostic message from server now included into error message
 - fn-any now shows strings in single quotes. Quotes and backslashes inside
   strings are C-style escaped.
 - for NULL strings fn-any pronts NULL (without quotes).
Sergey Kosyakov, serge@fnal.gov 

v2_1_1 01/10/2005
 - bug in NULL fields support fixed
 - compiles with GCC-3.4
Sergey Kosyakov, serge@fnal.gov

v2.0.2 10/25/2004
 - bug which could destroy failover chain has been fixed
 - library version changed to 2.0.2
Sergey Kosyakov, serge@fnal.gov

v2.0.1 10/25/2004
 - MetaRequest class added; it requests column names and types information
 - test-any.cc (fn-any) rewritten to use MetaRequest (example of usage)
 - client passes process id, user id, user name and user full name (if set) in requests to server
 - library version excavated to 2.0.1
Sergey Kosyakov, serge@fnal.gov

v1.1.2 09/17/2004
- frontier.h and frontier-cpp.h moved into include/frontier_client for consistency
- new method DataSource::isEOF() allows to verify full response demarshalling
- two new methods for diag/benchmarking tools: DataSource:getRSBinarySize() and DataSource::getRSBinaryPos()
- fn-any adapted to test isEOF()
Sergey Kosyakov, serge@fnal.gov

v1.1.1 (GCC only) 09/15/2004
- compiled with CDF KIT gcc-3.3.1
Sergey Kosyakov, serge@fnal.gov

v1.1 09/14/2004
- Per-thread (global if not threaded) error message holder
- uniform error handling with detailed messages
- number of error codes reduced to 7l they are logically combined in 4 groups
- the library never calls abort() any more
- attempt to refresh cache before server failover
- uniform log report
- 4 log levels: nolog, error, warning and debug
- logs could be redirected to file (stdout by default)
- 2 new environment variables to control log: FRONTIER_LOG_LEVEL and FRONTIER_LOG_FILE
- automatic kit preparation when "make dist"
- 4 executable into the KIT: fn-maincc, fn-maintest, fn-pescalib and fn-any
- fn-any can show any XSD object as it is returned by the server
- AnyData optimized by inlining and calls streamlining
- new public call in DataSource: getAnyData(AnyData *any)
- new public call in AnyData: isEOR()
- "make all" (or just "make") now builds executables as well
- EOR is fully supported now (see test-any.cc as an usage example)
- the lib version elevated to 1.1.0
Sergey Kosyakov, serge@fnal.gov

v1.0.2
LD_LIBRARY_PATH bug fixed
Sergey Kosyakov, serge@fnal.gov

v1.0.1
The library name has been changed to libfrontier_client.so
Sergey Kosyakov, serge@fnal.gov

v1.0
This is the first release of Frontier client API. 
Sergey Kosyakov, serge@fnal.gov
